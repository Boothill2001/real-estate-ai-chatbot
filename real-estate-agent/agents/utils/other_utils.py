# agents/utils/other_utils.py

def is_followup(user_query: str) -> bool:
    followup_keywords = [
        "n·ªØa", "ti·∫øp theo", "c√≤n kh√¥ng", "c√≥ c√°i n√†o", 
        "r·∫ª h∆°n", "g·∫ßn h∆°n", "cao h∆°n", "th·∫•p h∆°n", 
        "·ªü khu kh√°c", "c√≥ h√¨nh ·∫£nh kh√¥ng", "di·ªán t√≠ch l·ªõn h∆°n"
    ]
    return any(keyword in user_query.lower() for keyword in followup_keywords)

def display_reasoning(plan: dict):
    print("\nüß† Agent Reasoning Trace:")
    print(f"  üîπ Query after Rewrite: {plan.get('rewrite_query', 'N/A')}")
    print(f"  üîπ Retrieval Method: {plan.get('retrieval_method', 'N/A')}")
    print(f"  üîπ Reranker Model: {plan.get('reranker', 'N/A')}")
    print(f"  üîπ Reasoning Summary: {plan.get('reasoning', 'N/A')}")
    print("-" * 50)


def evaluate_results(results: list[str], min_results: int = 3) -> bool:
    """
    ƒê√°nh gi√° k·∫øt qu·∫£ retrieval c√≥ ·ªïn kh√¥ng.

    Args:
        results (list[str]): List k·∫øt qu·∫£ truy v·∫•n.
        min_results (int): S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi thi·ªÉu mong mu·ªën.

    Returns:
        bool: True n·∫øu ƒë·ªß t·ªët, False n·∫øu c·∫ßn retry.
    """
    if not results or len(results) < min_results:
        return False
    
    # C√≥ th·ªÉ th√™m ki·ªÉm tra content n·∫øu mu·ªën (v√≠ d·ª• keyword missing)
    return True

def format_reasoning_markdown(plan: dict) -> str:
    """
    Format reasoning plan into a nice markdown block for display.
    """
    reasoning_text = f"### Reasoning Plan\n"
    for key, value in plan.items():
        reasoning_text += f"**{key}:** {value}\n\n"
    return reasoning_text

def rewrite_query_simple(query: str) -> str:
    query = query.strip()
    if not query.endswith("?"):
        query += "?"
    if not query.lower().startswith("find") and not query.lower().startswith("list"):
        query = "Find flats: " + query
    return query
